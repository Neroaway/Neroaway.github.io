<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[算法-----枚举]]></title>
    <url>%2F2018%2F09%2F10%2F%E7%AE%97%E6%B3%95-%E6%9E%9A%E4%B8%BE%2F</url>
    <content type="text"><![CDATA[例题一： 完美立方体例如： a^3 = b^3 + c^3 + d^3 的等式被称为完美立方体。 输入：一个正整数N（N &lt;= 100) 输出： 每行输出一个完美立方体。输出格式 ： Cube = a , Triple = (b,c,d) 其中 a,b,c,d所在位置分别用实际求出四元组值代入。 12345678910111213141516171819202122#完美立方体#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;int main()&#123; int N; cin&gt;&gt;N; for(int a = 2;a &lt;= N;++a)&#123; for(int b = 2;b &lt; a;++b)&#123; for(int c = b;c &lt; a; c++)&#123; for(int d = c;d &lt; a;++d)&#123; if(a*a*a == b*b*b + c*c*c + d*d*d) printf("Cube = %d , Triple = (%d,%d,%d)\n",a,b,c,d); return 0; &#125; &#125; &#125; &#125;&#125;# 例题 二：生理周期题目阐述：人有体力、情商、智商的高峰日子，它们分别每隔 23天、28天和33天出现一次。对于每个人，我们想知道何时三个高峰落在同一天。给定三个高峰出现的日子p,e和 i（不一定是第一次高峰出现的日子）, 再给定另一个指定的日子d，你的任务是输出日子d之后，下一次三个高峰落在同一 天的日子（用距离d的天数表示）。例如：给定日子为10，下次出现三个高峰同一天的日子是12，则输出2。 生理周期输入​ 输入四个整数：p, e, i和d。 p, e, i分别表示体力、情感和智力高峰出现的日子。d是给定的日子，可能小于p, e或 i。所有给定日子是非负的并且小于或等于365，所求的日子小于或等于21252 输出​ 从给定日子起，下一次三个高峰同一天的日子（距离给定日子的天数）。 输入样例0 0 0 0 0 0 0 100 5 20 34 325 4 5 6 7 283 102 23 320 203 301 203 40 -1 -1 -1 -1 输出样例Case 1: the next triple peak occurs in 21252 days. Case 2: the next triple peak occurs in 21152 days. Case 3: the next triple peak occurs in 19575 days. Case 4: the next triple peak occurs in 16994 days. Case 5: the next triple peak occurs in 8910 days. Case 6: the next triple peak occurs in 10789 days. 代码1234567891011121314151617#include &lt;iostream&gt; #include &lt;cstdio&gt; using namespace std;#define N 21252int main()&#123;int p,e,i,d,caseNo = 0;while( cin &gt;&gt; p &gt;&gt; e &gt;&gt;i &gt;&gt;d &amp;&amp; p!= -1) &#123; ++ caseNo; int k; for(k = d+1; (k-p)%23; ++k); for(; (k-e)%28; k+= 23); for(; (k-i)%33; k+= 23*28); cout &lt;&lt; "Case " &lt;&lt; caseNo &lt;&lt; ": the next triple peak occurs in " &lt;&lt; k-d &lt;&lt; " days." &lt;&lt; endl; &#125; return 0;&#125; 三：称硬币题目阐述：有12枚硬币。其中有11枚真币和1枚假币。假币和真币重量不同，但不知道假币比真币轻还是重。现在，用一架天平称了这些币三次，告诉你称的结果，请你找出假币并且确定假币是轻是重（数据保证一定能找出来）。 输入：​ 第一行是测试数据组数。 每组数据有三行，每行表示一次称量的结果。银币标号为 A-L。每次称量的结果用三个以空格隔开的字符串表示：天平左边放置的硬币 天平右边放置的硬币 平衡状态。其中平衡 状态用up&#39;&#39;,down’’, 或 even’’表示, 分别为右端高、右端低和平衡。天平左右的硬币数总是相等的。 输出： 输出哪一个标号的银币是假币，并说明它比真币轻还是重。 输入样例:1ABCD EFGH evenABCI EFJK upABIJ EFGH even 输出样例：K is the counterfeit coin and it is light. 解题思路 对于每一枚硬币先假设它是轻的，看这样是否符合称量结果。如果符合，问题即解决。如果不符合，就假设它是重的，看是否符合称量结果。把所有硬币都试一遍，一定能找到特殊硬币。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;char Left[3][4];char Right[3][4];char result[3][4];bool IsFake(char c , bool light);int main()&#123; int t; cin&gt;&gt;t; while (t--)&#123; for(int i = 0;i &lt; 3;++i) cin&gt;&gt;Left[i]&gt;&gt;Right[i]&gt;&gt;result[i]; for(char c = 'A';c &lt;= 'L';c++)&#123; if(IsFake(c, true))&#123; cout&lt;&lt;c&lt;&lt;"is the counterfeit coin and it is light.\n"; break; &#125; else if(IsFake(c , false))&#123; cout&lt;&lt;c&lt;&lt;"is the counterfeit coin and it is the heavy.\n"; break; &#125; &#125; &#125; return 0;&#125;bool IsFake(char c , bool light)&#123; for(int i = 0 ;i &lt;3 ;++i) &#123; char *pLeft, *pRight; if (light) &#123; pLeft = Left[i]; pRight = Right[i]; &#125; else &#123; pRight = Left[i]; pLeft = Right[i]; &#125; switch (result[i][0]) &#123; case 'u': if (strchr(pRight, c) == NULL) return false; break; case 'e': if (strchr(pRight, c) == strchr(pLeft, c)) return false; break; case 'd': if (strchr(pLeft, c) == NULL) return false; break; &#125; &#125; return true;&#125; 四： 熄灯问题#]]></content>
      <tags>
        <tag>C++算法与数据结构(基础）</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
